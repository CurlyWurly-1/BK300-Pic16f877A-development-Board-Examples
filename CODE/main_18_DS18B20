/********************************************************************************************
* PIC16F877A 
* IR Display - please note:
* - When waiting for a signal, the IR receiver idles high
* - When a button is pressed on the IR remote, the structure of pulses 
*   from the IR receiver is as follows:
*   N.B. The pulses are all LSB - starting with the lowest digit ending with the most significant digit 
*    x1 - A LOW for 9   ms
*    x2 - a HI  for 4.5 ms
*    x3 - 8 pulses of equal   length states of LOW (0.58ms) and HI (0.58ms)  - T = 1.16 ms
*    x4 - 8 pulses of unequal length states of LOW (0.58ms) and HI (1.65ms)  - T = 2.3  ms
*    x5 - 8 pulses for digits 1 and 2 - with a long HIGH state (1.65ms) indicating a HI (otherwise a LOW)
*    x6 - 8 pulses for digits 3 and 4 - with a long HIGH state (1.65ms) indicating a HI (otherwise a LOW)  
*
* The 2 nibbles in x5 are the first and second digits
* The 2 nibbles in x6 are the third and forth  digits
*     
*********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <xc.h>
#include "BoardConfig.h" 

#pragma config FOSC  = XT       // Oscillator Selection bits (XT oscillator)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP   = OFF      // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD   = OFF      // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT   = OFF      // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP    = OFF      // Flash Program Memory Code Protection bit (Code protection off)

// Unless specified elsewhere, 4MHz system frequency is assumed
#ifndef _XTAL_FREQ
 #define _XTAL_FREQ 4000000
#endif

#define HX1838_IR    RA2

uchar Led_Index;   
uchar IR_NUM[4]     = {0,0,0,0,};
uchar LED_BIT_SEL[] = {0x10,0x20,0x40,0x80};
uchar LED_number[]  = {0xC0,0xF9,0xA4,0xB0,0x99,0x92,0x82,0xf8,
                       0x80,0x90,0x88,0x83,0xC6,0xA1,0x86,0x8E};

void mcu_init();
uint Ir_Get_Low_time();
uint Ir_Get_High_time();	
void __interrupt() TMR0INT(void);

/****************************************************************************
* main()
****************************************************************************/
void main(void)
{
    uint pulseTime;
    uint i;
    uint j;

    mcu_init();
     
    do{
        restart:                    // This is GOTO Tag
        while(HX1838_IR);           // Stay here until a LOW is seen   
// Get pulse length of LOW pulse     
        pulseTime = Ir_Get_Low_time();     
// Abandon if LOW pulse length is out of spec 
        if(pulseTime<8500 || pulseTime>9500) continue; 
// Get pulse length of HI pulse    
        pulseTime = Ir_Get_High_time();
// Abandon if HI pulse length is out of spec 
        if(pulseTime<4000 || pulseTime>5000) continue; 

// Loop for 4 bytes        
        for(i=0; i<4; i++) 
        {
// Loop for 8 bits of a byte
            for(j=0; j<8; j++) 
            {
// Get pulse length of LOW pulse   
                pulseTime = Ir_Get_Low_time(); 						  
// Abandon if LOW pulse length is out of spec 
                if(pulseTime<200 || pulseTime>800)  goto restart;
// Get next pulse length of HI pulse   
                pulseTime = Ir_Get_High_time();
// Abandon if HI pulse length is out of spec 
                if(pulseTime<200 || pulseTime>2000) goto restart;

// N.B. the data comes in LSB form
// i.e. 1 comes in as 10000000, so first of all shift the 
// bits of the array value one to the right, and then set 
// the most significant bit. If you do this 8 times, it all works out 

// Shift IR_NUM array to the right.                
                IR_NUM[i] >>= 1;
// If pulse time signifies a high, then set highest bit of byte 
// This is done by "or"ing the value with binary 10000000                
                if(pulseTime > 1120) 
                {
                    IR_NUM[i] |= 0x80;
                }
            }
        }

// After the four bytes have been received, process the 4 nibbles of the 
// last 2 bytes and spread these 4 nibble values back across the 4 array values        
        IR_NUM[0] = (IR_NUM[2])    & 0x0f;  // Blank out most significant nibble
        IR_NUM[1] = (IR_NUM[2]/16);         // Same as shifting right 4 places 
        IR_NUM[2] = (IR_NUM[3])    & 0x0f;  // Blank out most significant nibble
        IR_NUM[3] = (IR_NUM[3]/16);         // Same as shifting right 4 places 
    }while(1);
}

/****************************************************************************
* mcu_init(void)
****************************************************************************/
void mcu_init(void)
{
// Initialise pic on the BK300 board
    Board_init();      
    
// ADCON1 - Set all pins of PORTA as digital  
    ADCON1     = 0X07;      

// RA2 - Set as input
    TRISA2     = 1;               
    
// RA2 - Preset (input) to be HI
    RA2        = 1;         
    
// OPTION_REG - Control register for TIMER0 - Set prescaller rate to 1:16 TMR0 
// This is for display strobing  
// N.B. if you set to 1:32, you start to see the strobing
//      If you set to 1:2,  its very quick, but you can see segments with "leftover" lighting     
    OPTION_REG = 0x03;      
//    OPTION_REG = 0x00;     

// INTCON
// Bit 7 - GIE  - Enables Global Interrupts (like a master switch) 
//         If HI, this enables all the different interrupts to function.
// Bit 5 - T0IE - Enables The TMR0 Overflow Interrupt 
//         If HI, this enables an interrupt to be fired when the TMR0 counter 
//         overflows from 255 (0xff) to 0 (0x00)    
    INTCON     = 0XA0;       

// TMR0 - Set Timer Value to 195 (Doesn't seem to matter what this is set to)    
    TMR0       = 0xc3;        

// T1CON - Control register for TIMER1 (equivalent of OPTION_REG for TIMER0)
// This is for Timing pulses and the prescaller rate is set to max i.e. 1:2  
    T1CON      = 0X00;            
}

/****************************************************************************
* void __interrupt() TMR0INT(void)
****************************************************************************/
void __interrupt() TMR0INT(void)
{
    T0IF  = 0;                     
    TMR0  = 0x05;                

// Open latch for powering one of the four (7 segment) display units
    RC4   = 1;                        
// Use RD4-RD7 to Present the selection of the display unit to be powered 
// e.g. PORTD could be like this 0010xxxx 
    PORTD = LED_BIT_SEL[Led_Index];   
// Lock selection of display unit to be powered  
    RC4   = 0;                         

// Open latch for sinking the segments of the 7 segment display units    
    RC3   = 1;
// Present selection of segments to be lit 
    PORTD = LED_number[IR_NUM[Led_Index]];
// Lock selection of segments to be sinked
    RC3   = 0;

// With each firing of the interrupt, increment Led_Index from zero to 3 
// and then cycle back to zero e.g. 0,1,2,3,0,1,2,3
    if(++Led_Index>3)Led_Index=0;    
}

/****************************************************************************
* uint Ir_Get_Low_time(void)
****************************************************************************/
uint Ir_Get_Low_time(void)
{
// Start Timing
    TMR1L = 0;
    TMR1H = 0; 
    T1CON = 0X01;  
    while(!HX1838_IR  && (TMR1H&0x80)==0);  // Stay here until a HIGH is seen               
    T1CON = 0X00;                           // end timing					  
    return (TMR1H*256+TMR1L);               // Return time of LOW pulse 
}

/****************************************************************************
* uint Ir_Get_High_time(void)		
****************************************************************************/
uint Ir_Get_High_time(void)															    
{
// Start Timing
    TMR1L = 0;
    TMR1H = 0; 
    T1CON = 0X01;     
    while(HX1838_IR  && (TMR1H&0x80)==0);   // Stay here until a LOW is seen                  
    T1CON = 0X00;                           // end timing					  
    return TMR1H*256+TMR1L;                 // Return time of HIGH pulse 
}
