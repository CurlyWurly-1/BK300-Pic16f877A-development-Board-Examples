/********************************************************************************************
* PIC16F877A 
* Timer 2 
*********************************************************************************************/
#include <stdio.h>
#include <stdlib.h>
#include <xc.h>
#include "BoardConfig.h" 

#pragma config FOSC  = XT       // Oscillator Selection bits (XT oscillator)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP   = OFF      // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD   = OFF      // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT   = OFF      // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP    = OFF      // Flash Program Memory Code Protection bit (Code protection off)

// Unless specified elsewhere, 4MHz system frequency is assumed
#ifndef _XTAL_FREQ
 #define _XTAL_FREQ 4000000
#endif

void __interrupt() TMR2INT(void);
void LED_DISPLAY(void);
void delay(uchar a,uchar b);

uint  counter;
uchar DIS_NUM[4];
uchar TMR2_COUTER;
uchar LED_DIS[] = {0xc0,0xf9,0xa4,0xb0,0x99,0x92,0x82,0xf8,
                   0x80,0x90,0X88,0X83,0XC6,0XA1,0X86,0X8E,0XFF};

/********************************************************************************************
* void main (void)
*********************************************************************************************/
void main (void)
{
    Board_init(); 
    RC5        = 0;        
    OPTION_REG = 0x07;
    INTCON     = 0XA0;
    TMR0       = 0x05;
    while(1)
    {     
        DIS_NUM[0] = (uchar)(counter/1000);
        DIS_NUM[1] = (uchar)((counter%1000)/100);
        DIS_NUM[2] = (uchar)((counter%100)/10);
        DIS_NUM[3] = (uchar)(counter%10);
        LED_DISPLAY();
    }
}

/********************************************************************************************
* void __interrupt() TMR0INT(void)
*********************************************************************************************/
void __interrupt() TMR0INT(void)
{
    T0IF = 0;
    TMR2_COUTER++;
    if(TMR2_COUTER == 20)
    {
        TMR2_COUTER = 0;
        counter++;
    }
    TMR0 = 0x05;
}

/********************************************************************************************
* void LED_DISPLAY(void)
*********************************************************************************************/
void LED_DISPLAY(void)
{
    uchar i;
    uchar TEMP;
    RA3  = 0;                      
    TEMP = 0X80;
    for(i=0; i<4; i++)
    {
        RC4   = 1;                   
        PORTD = TEMP;                 
        RC4   = 0;                    
        RC3   = 1;
        PORTD = LED_DIS[DIS_NUM[i]];
        RC3   = 0;
        TEMP >>= 1;                
        delay(10,10);             
        RC4   = 1; 
        PORTD = 0X00;
        RC4   = 0;
        delay(1,10);
    }
}

/********************************************************************************************
* void delay(uchar a,uchar b)
*********************************************************************************************/
void delay(uchar a,uchar b)
{	
    while(--a)
    while(--b);
}
