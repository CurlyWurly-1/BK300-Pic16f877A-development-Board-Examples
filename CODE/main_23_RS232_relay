/********************************************************************************************
* PIC16F877A 
* RS232 Relay
* Send character 0 to switch OFF relay  
* Send character 1 to switch ON  relay 
* 
* Connect a serial cable to your PC and use terminal software (e.g. "Termite")
* and configure it with the following setup:
* - Port             = COM1  (Usually)
* - baud rate        = 9600
* - Data Bits        = 8
* - Stop Bits        = 1
* - Parity           = none 
* - flow control     = RTS/CTS
* - Forward          = none  
 *********************************************************************************************/
#include <xc.h>   
#include <stdio.h>
#include <stdlib.h>
#include "BoardConfig.h" 

#pragma config FOSC  = XT       // Oscillator Selection bits (XT oscillator)
#pragma config WDTE  = OFF      // Watchdog Timer Enable bit (WDT enabled)
#pragma config PWRTE = OFF      // Power-up Timer Enable bit (PWRT disabled)
#pragma config BOREN = OFF      // Brown-out Reset Enable bit (BOR disabled)
#pragma config LVP   = OFF      // Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit (RB3 is digital I/O, HV on MCLR must be used for programming)
#pragma config CPD   = OFF      // Data EEPROM Memory Code Protection bit (Data EEPROM code protection off)
#pragma config WRT   = OFF      // Flash Program Memory Write Enable bits (Write protection off; all program memory may be written to by EECON control)
#pragma config CP    = OFF      // Flash Program Memory Code Protection bit (Code protection off)

// Unless specified elsewhere, 4MHz system frequency is assumed
#ifndef _XTAL_FREQ
 #define _XTAL_FREQ 4000000
#endif

/********************************************************************************************
* void main()
*********************************************************************************************/
void main()
{    
    Board_init();   
    TRISC = 0XFF;
    SPBRG = 0X19;
    TXSTA = 0X24;
    RCSTA = 0X90;
    RCIE  = 0X1;
    GIE   = 0X1;
    PEIE  = 0X1; 
    while(1); 
}

/********************************************************************************************
* void main()
*********************************************************************************************/
void __interrupt() usart(void)
{
    if(RCIE && RCIF) 
    {
        if(RCREG == 0x30)
        RE1 = 1; 
        else if(RCREG == 0X31)
        RE1 = 0; 
    }
}
